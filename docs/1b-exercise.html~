<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="generator" content="pandoc">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes">
  <title>実習Ｂ　図３と図７の散布図</title>
  <style type="text/css">code{white-space: pre;}</style>
  <script src="/y22-il1j/lib/js/jquery.min.js"></script>
  <script src="/y22-il1j/lib/js/il.js"></script>
  <link rel="stylesheet" href="/y22-il1j/lib/css/solarized.css">
  <link rel="stylesheet" href="/y22-il1j/lib/css/page.css">
  <link ref="shortcut icon" type="image/png" href="favicon.png">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-AMS_CHTML-full" type="text/javascript"></script>
  <!--[if lt IE 9]>
    <script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js"></script>
  <![endif]-->
</head>
<body>
<header>
<h1 class="title">実習Ｂ　図３と図７の散布図</h1>
</header>
<section class="header">
<a href="/y22-il1j">情報リテラシ第一</a> / <a href="/y22-il2j">情報リテラシ第二</a>
</section>
<h2 id="b-1図">B-1：図３</h2>
<p><code>plot/fig3-cnm-ratio-joins.plot</code>はgnuplotのプログラムです。ターミナルを開き、plotディレクトリに移動してから<code>gnuplot fig3-cnm-ratio-joins.plot</code>コマンドを実行すると<code>images</code>ディレクトリに<code>fig3-cnm-ratio-join.pdf</code>という名前の画像ファイルが生成されます。</p>
<p>残念ながらこの画像ファイルにはいくつかの問題があります。</p>
<ul>
<li><p>画像ファイルの大きさはなんと2MBと巨大です。開いてみるとわかりますが、表示されるまでに数秒を要します。たえしにプリンタで印刷すると（やめて下さいね）、印刷に異常に長い時間がかかります。</p></li>
<li><p>扱っているデータは極端に広い範囲に分布しているため、データの分布がよく見えません。片対数グラフを用いると状況が改善できそうです。</p></li>
</ul>
<figure>
<img src="images/1x/fig3-cnm-ratio-join.png" alt="図３：CNM法におけるクラスターの合併比率の推移（片対数）" /><figcaption>図３：CNM法におけるクラスターの合併比率の推移（片対数）</figcaption>
</figure>
<h2 id="b-2図">B-2：図７</h2>
<blockquote>
<p>図３のスクリプトを参考にして、自分で作成しなさい。スクリプトは図３のスクリプトをコピーし、fig7-hn-ratio-joins.plotと命名してから作業すること。</p>
</blockquote>
<figure>
<img src="images/1x/fig7-hn-ratio-join-500K.png" alt="図７：ＨＮにおけるクラスターの合併比率の推移（片対数）" /><figcaption>図７：ＨＮにおけるクラスターの合併比率の推移（片対数）</figcaption>
</figure>
<h1 id="どうして巨大な画像ファイルになるの">どうして巨大な画像ファイルになるの？</h1>
<p>配布したgnuplotのプログラムが生成するのはベクトル画像をPDF形式で保存したものです。ベクトル画像においては画像全体は数学的な基本図形を組み合わせることによって表現されています。散布図の場合、個々の点は円を塗り潰したベクトル図形として表現しています。</p>
<p>以下の図は、生成されたPDFファイルを画像ビューワのプレビューで開いたのち、「Command +」を繰り返し入力することで画像を拡大したもののスナップショットです。この図より、個々の点がきれいな黒い円として表現されていることがわかります。この無駄に精密な表現によって、画像ファイルが大きくなってしまったのです。</p>
<figure>
<img src="images/1x/fig3-pdf-problem.png" alt="大規模な散布図をPDF形式で出力した場合の問題点" /><figcaption>大規模な散布図をPDF形式で出力した場合の問題点</figcaption>
</figure>
<p>プリンタがベクトル表現の円を描くときには、それぞれの円についてプリンタのなかで <span class="math inline">\((x - x_1)^2 + (y - y_1)^2 \le r^2\)</span> の領域を紙面上で塗り潰します。上の散布図には100万近くの点が含まれているので、それだけの数の円の方程式を求解していることになります。この計算の手間を考えれば、プリントに時間がかかる理由が想像できますよね？</p>
<h1 id="ビットマップ画像とベクトル画像">ビットマップ画像とベクトル画像</h1>
<p>「ベクトル表現の円」という言葉が出てきました。「ベクトル表現」は画像のファイルフォーマットの流儀で二種類あるもののひとつです。以下では二種類の画像フォーマットの特性と違いについてすこし詳しく説明します。</p>
<h2 id="ビットマップ画像">ビットマップ画像</h2>
<p>静止画像を表現するための画像フォーマットには多くのものがあります。代表的なものに BMP, GIF, JPEG, PNG, TIFF などがあります。このうち、BMP形式は通常圧縮を施さないため画像データが極めて大きくなります。GIF形式、PNG形式、TIFF形式は通常、可逆圧縮を施しますのでBMP形式よりはかなり小さくなります。このなかで、GIF形式は利用可能な色数が256色に制限されます。一方、PNG形式とTIFF形式はフルカラーに対応しています。このためGIF形式はアイコンやウェブ素材のように少ない色数ですむ用途に利用されています。JPEG形式は非可逆圧縮を施すために圧縮率について優れています。JPEG 2000は、JPEG の新しい規格で圧縮率と画質の両方について優れているのですが、いまのところあまり普及していません。</p>
<p>画像フォーマットはその性質にあった用途で利用します。写真に対して画像処理を行う場合には、最終的な完成品の品質が可能な限り高くなるように保ちたいものです。このため、画像処理をする段階では非可逆圧縮方式の画像フォーマットを避けます。写真の画像処理に頻繁に用いられる画像フォーマットはTIFF形式です。</p>
<p>高品質な写真を含んだ印刷物の場合、その原稿にも高品質な画像フォーマットが利用されます。多くの出版社が持ち込み写真原稿として TIFF 形式を指定するのはこの理由からです。</p>
<p>一方、写真をウェブページを用いて公開したり、電子メールの添付ファイルとして送信する場合にはデータの大きさを小さくする必要があります。このため多少、画質を犠牲にしてもデータを小さくできる非可逆圧縮方式を利用できる画像フォーマットが利用されます。この代表がJPEG形式です。JPEG形式の場合、圧縮率を必要に応じて指定することができます。</p>
<p>コンピュータソフトウェアのアイコンのように、少ない色数を使った比較的単純な造形の場合にはデータの大きさよりも形状の見易さが重視されます。このため、可逆圧縮方式が利用できる画像フォーマットが利用されます。この代表が GIF 形式と PNG 形式です。</p>
<h2 id="ベクトル画像">ベクトル画像</h2>
<p>ビットマップ画像は微小な画素（ピクセル）から構成されています。画素が人間の眼に十分に小さければ、人間の眼には自然な画像と見えるのですが、その画像を拡大するにつれ画素が目についてきます。画像を2倍、4倍、8倍に拡大したものを並べると、4倍に拡大したものは画像のギザギザが目立ってきます。8倍に拡大したものにおいては、画質のさらなる低下は免れません。</p>
<p>ビットマップ画像とは別に画像を表現する方式に <strong>ベクトル画像</strong> があります。ベクトル画像は主に図形を表現するための表現方法で、数式で表現可能な基本的な形状を組み合わせることで図を構成していきます。画像に対する拡大や回転などの操作を行っても、拡大したり回転した平面を対象に描画を行うことでビットマップ画像のときに問題となったギザギザが発生することがありません。したがって、ベクトル画像を拡大しても画質は低下しません。</p>
<p>ベクトル画像を構成する基本図形は、線や折れ線、多角形、円や楕円、曲線などです。曲線はベジエ曲線やスプライン曲線のように多項式で与えた方程式によって形状を定めます。</p>
<p>ベクトル画像は主に、設計図、模式図などの描画に用いられます。また、自由に大きさを指定することが可能なフォントの情報もベクトル画像として構成されています。ベクトル画像を編集するためのソフトウェアとしては、コンピュータを用いた設計のためのCADや、ベクトル画像一般の編集のためのドローソフトがあります。</p>
<section class="footer">
<a href="/y22-il1j/">情報リテラシ第一</a> / <a href="/y22-il2j/">情報リテラシ第二</a>
</section>
</body>
</html>
